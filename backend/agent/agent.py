from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from config.general_cfg import *
from routes.control import *
from routes.autorule import *
from utils.general_helper import receive_feed_value
from notification.tasks import send_notification
import asyncio, time
from utils.logger import Logger


LOGGER = Logger(__file__,log_file="agent.log")

scheduler = AsyncIOScheduler()

# Auto sent notify and control based on condition
async def get_sensor_data():
    start_time = time.time()

    cursor = user_collection.find({}, {'devices': 1, 'user_id': 1, 'noti': 1, '_id': 0})
    async for user in cursor:

        for device_id in user.get('devices', []):
            device = await db.Devices.find_one({"device_id": device_id}, {'device_id':1 , 'type': 1})
            if not device:
                continue
            if device['type'] == "Light sensor":
                light_sensor = receive_feed_value(os.getenv("AIO_KEY"), os.getenv("AIO_USERNAME"), os.getenv("LIGHT_SENSOR_FEED"), "last")   
                asyncio.create_task(controlLight_by_condition(user,float(light_sensor['value']),device))
            elif device['type'] == "Temperature sensor":
                temp_sensor = receive_feed_value(os.getenv("AIO_KEY"), os.getenv("AIO_USERNAME"), os.getenv("TEMPERATURE_FEED"), "last")   
                asyncio.create_task(fire_alarm(user,float(temp_sensor['value']),device))
                asyncio.create_task(hot_alarm(user,float(temp_sensor['value'])))
            elif device['type'] == "Humidity sensor":
                humid_sensor = receive_feed_value(os.getenv("AIO_KEY"), os.getenv("AIO_USERNAME"), os.getenv("HUMIDITY_FEED"), "last")     

            asyncio.create_task(controlFan_by_condition(user,float(temp_sensor['value']),float(humid_sensor['value']),device))

    process_time = time.time() - start_time

    next_run = datetime.now() + timedelta(seconds=10)

    LOGGER.log.info(
        f'Job "get_sensor_data (trigger: interval[10 seconds], '
        f'next run at: {next_run.strftime("%Y-%m-%d %H:%M:%S")})" '
        f'executed successfully - {process_time:.2f}s'
    )

async def fire_alarm(user: dict, temp_sensor_val: float, device):
    if user['noti']['status'] == "off":
        return
    
    if temp_sensor_val < FIRE_ALARM_THRESHOLD:
        
        pump_last = await device_status(6)
        if pump_last is None or not pump_last.get('action'):
            return

        user_id_ctx.set(user['user_id'])
        await turn_off_pump(ActionLog(
            device_id=device['device_id'],
            action=0
        ))
        return 
    
    send_notification.apply_async(args=[user, "Ch√°y r·ªìi bro ∆°i üò≠üò≠", "M√°y b∆°m ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ d·∫≠p l·ª≠a, mau g·ªçi c·ª©u h·ªèa ƒëi ..."])
    user_id_ctx.set(user['user_id'])
    await turn_on_pump(ActionLog(
        device_id=device['device_id'],
        action=1
    ))

    return


async def hot_alarm(user: dict, temp_sensor_val: float):
    if user['noti'].get('hot_notif', "off") == "off":
        return

    if temp_sensor_val < user['noti']['temp']:
        return 
    
    send_notification.apply_async(args=[user, "N√≥ng qu√° ü•µü•µ", "B·∫°n c√≥ mu·ªën b·∫≠t qu·∫°t kh√¥ng :)))"])
    
    return


# Auto control fan by condition
async def controlFan_by_condition(user: dict, temp_sensor_val: float, humid_sensor_val: float, device: dict):
    """
    1. Ki·ªÉm tra user c√≥ b·∫≠t ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn theo nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m ko, n·∫øu c√≥ th·ª±c hi·ªán ti·∫øp
    2. Ki·ªÉm tra user c√≥ c√†i humidity v√† temperature ko
    3. Kh√¥ng th√¨ d√πng FAN_TEMPERATURE_THRESHOLD v√† FAN_HUMIDITY_THRESHOLD, C√≥ th√¨ d√πng c·ªßa ng∆∞·ªùi d√πng
    4. Ki·ªÉm tra c√≥ v∆∞·ª£t ng∆∞·ª°ng ko (temp_sensor_val > FAN_TEMPERATURE_THRESHOLD or humid_sensor_val > FAN_HUMIDITY_THRESHOLD)
    5. N·∫øu c√≥, ti·∫øn h√†nh b·∫≠t qu·∫°t theo t·ªëc ƒë·ªô ng∆∞·ªùi d√πng set ho·∫∑c d√πng t·ªëc ƒë·ªô m·∫∑c ƒë·ªãnh
    """
    
    pass


# Auto control light by condition
async def controlLight_by_condition(user: dict, light_sensor_val: float, device: dict):
    """
    1. Ki·ªÉm tra user c√≥ b·∫≠t ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn theo c∆∞·ªùng ƒë·ªô √°nh s√°ng ko, n·∫øu c√≥ th·ª±c hi·ªán ti·∫øp
    2. Ki·ªÉm tra user c√≥ c√†i light_intensity ko
    3. Kh√¥ng th√¨ d√πng LIGHT_INTENSITY_THRESHOLD, C√≥ th√¨ d√πng c·ªßa ng∆∞·ªùi d√πng
    4. Ki·ªÉm tra c√≥ v∆∞·ª£t ng∆∞·ª°ng ko (light_sensor_val > LIGHT_INTENSITY_THRESHOLD)
    5. N·∫øu c√≥, ti·∫øn h√†nh b·∫≠t ƒë√®n theo m√†u v√† level ng∆∞·ªùi d√πng set ho·∫∑c d√πng m·∫∑c ƒë·ªãnh LIGHTCOLOR_DEFAULT v√† LIGHTLEVEL_DEFAULT
    """

    pass

# Auto control pump


# Auto receive sensor data


# Auto run countdown


# Auto control by time
async def control_by_time():
    """
    1. Ki·ªÉm tra t·∫°i th·ªùi ƒëi·ªÉm n√†y c√≥ nh·ªØng user n√†o c√†i ƒë·∫∑t timeframe cho device n√†o, 
    2. Ki·ªÉm tra tr·∫°ng th√°i device c·ªßa user, n·∫øu b·∫≠t ho·∫∑c t·∫Øt r·ªìi th√¨ ko ti·∫øn h√†nh b∆∞·ªõc 3
    3. Ti·∫øn h√†nh b·∫≠t t·∫Øt device theo timeframe ƒë√≥, 
    4. Gi·∫£m repeat c·ªßa user xu·ªëng
    """
    
    pass


# Start Agent Service
def start_agent():
    scheduler.start()
    scheduler.add_job(get_sensor_data, IntervalTrigger(seconds=10))
    scheduler.add_job(control_by_time, IntervalTrigger(minutes=1))

def shutdown_agent():
    scheduler.shutdown()
